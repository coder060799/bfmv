https://losst.pro/kak-polzovatsya-nftables#%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5_%D1%86%D0%B5%D0%BF%D0%BE%D1%87%D0%BA%D0%B8_%D0%B2_nftables
https://habr.com/ru/companies/otus/articles/598145/

ip - таблицы этого семейства будут видеть трафик (пакеты) протокола IPv4;
ip6 - таблицы этого семейства будут видеть трафик (пакеты) протокола IPv6;
inet - в таблицах этого семейства будет обрабатываться трафик (пакеты) протоколов IPv4 и IPv6. Правила для ipv4 не будут влиять на пакеты IPv6. Правила, подходящие под оба протокола, будут влиять на пакеты обоих протоколов;
arp - таблицы этого семейства видят трафик arp - протокола;
bridge - в таблицах будут видеться пакеты, коммутируемые на уровне L2 OSI. Это семейство аналог ebtables;
netdev - это семейство, аналогов которого нет в x_tables. Оно видит все пакеты, которые только были переданы драйвером в стек протоколов.

Хуки - используются для того чтобы запустить правило в определенным момент обработыки сетевых данных. Сами по себе хуки работают опираясь на тип таблиц.
Например, для ip, ip6 и inet существуют вот такие:
prerouting - обработка всех входящих пакетов, это вообще ВСЕ пакеты, которые могут быть приняты системой.
input - пакеты, которые пришли для системы.
forward - пакеты, которые пересылаются для другой системы через нашу
output - пакеты, которые будут отправляться от операционной системы во внешнюю сеть
postrouting - все пакеты, которые покидают систему, это те которые генерируются ОС и те, которые просто были пересланы
ingress - доступен только для inet, начиная с версии ядра 5.10, тут обработка происходит для всех пакетов, которые приходят в систему, срабатывает раньше других хуков.

Все правила разделяются на базовые и регулярные правила. Регулярные правила могут быть использованы для создания длинных последовательностей разбора данных или по просту говоря это принцип группировки правил. Для их задействования нужно явно их позвать из правила. Базовые же правила можно использовать сразу, единственное условие, базовые правила должны подчиняться следующему шаблону:
type <> hook <> priority <>;

пример создания правила для блокировки трафика:
nft add table inet deny_traffic
nft add chain inet deny_traffic deny_traffic_chain { type filter hook postrouting priority 0\; policy drop\;}
nft add rule inet deny_traffic deny_traffic_chain ip saddr <source ip> tcp dport ssh drop

