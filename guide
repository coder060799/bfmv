1. В ЛК vk cloud зайти в личный кабинет в настройки проекта
2. Скачать файлы со страницы кабинета и заменить на свои пароли
3. apt install -y python3-openstackclient установить
4. https://mcs.mail.ru/docs/ru/additionals/account/project/cli/authorization
скачать openrc с https://mcs.mail.ru/app/mcs9449790386/project/keys
5. Запустить source файл.ssh
6. openstack flavor list - просмотр имеющихся образов 
7. openstack volume type list - просмотр имеющихся типов дисков
8. openstack image list - Доступные образы и их UUID можно посмотреть командой OpenStack CLI:

terraform {
  required_providers {
    vkcs = {
      source  = "hub.mcs.mail.ru/repository/vkcs"
    }
  }
}

provider "vkcs" {
    username   = "email@mail.ru"
    password   = "#####"
    project_id = "5565babd88134a32b89e10cd95cd613f"
  }

### Сеть
## Создание сети
resource "vkcs_networking_network" "new_network_01" {
    name           = "new_network_01"
}

## Создание подсети
# Подсеть 01
resource "vkcs_networking_subnet" "new_subnet_01" {
  name       = "new_subnet_01"
  network_id = "${vkcs_networking_network.new_network_01.id}"
  cidr       = "10.10.10.0/24"
  ip_version = 4
}

 Создаем роутер
resource "vkcs_networking_router" "router_01" {
  name                = "router_01"
  admin_state_up      = true
  external_network_id = "298117ae-3fa4-4109-9e08-8be5602be5a2"
}

 Создаем интерфейс роутера
resource "vkcs_networking_router_interface" "router_interface_subnet_01" {
  router_id = "${vkcs_networking_router.router_01.id}"
  subnet_id = "${vkcs_networking_subnet.new_subnet_01.id}"
}

 Внешние адреса
 Внешний адрес для vm_01
resource "vkcs_networking_floatingip" "ext_ip_vm_01" {
  pool = "ext-net"
}

 Привязка внешних адресов к виртуальным машинам
 NAT для vm_01
resource "vkcs_compute_floatingip_associate" "nat_vm_01" {
  floating_ip = "${vkcs_networking_floatingip.ext_ip_vm_01.address}"
  instance_id = "${vkcs_compute_instance.vm_web_01.id}"
  fixed_ip    = "${vkcs_compute_instance.vm_web_01.network[0].fixed_ip_v4}"
}

 Порты для виртуальных машин
 порт для машины vm_01
resource "vkcs_networking_port" "port_app_01" {
  name               = "port_vm_01"
  network_id         = "${vkcs_networking_network.new_network_01.id}"
  admin_state_up     = "true"
  security_group_ids = ["${vkcs_networking_secgroup.security_group_app.id}"]
  fixed_ip {
    subnet_id  = "${vkcs_networking_subnet.new_subnet_01.id}"
    ip_address = "10.10.10.10"
  }
}

 Безопасноть
 Группа безопасности (файерволл) для серверов
resource "vkcs_networking_secgroup" "security_group_web" {
  name        = "security_group_web"
}

## Группа безопасности (файерволл) для APP серверов
resource "vkcs_networking_secgroup" "security_group_app" {
  name        = "security_group_app"
}

 Правила для группы безопасности WEB
 Разрешаем ssh
resource "vkcs_networking_secgroup_rule" "allow_ssh_web" {
  direction         = "ingress"
  ethertype         = "IPv4"
  protocol          = "tcp"
  port_range_min    = 22
  port_range_max    = 22
  remote_ip_prefix  = "0.0.0.0/0"
  security_group_id = "${vkcs_networking_secgroup.security_group_web.id}"
}

 Разрешаем http
resource "vkcs_networking_secgroup_rule" "allow_http_web" {
  direction         = "ingress"
  ethertype         = "IPv4"
  protocol          = "tcp"
  port_range_min    = 80
  port_range_max    = 80
  remote_ip_prefix  = "0.0.0.0/0"
  security_group_id = "${vkcs_networking_secgroup.security_group_web.id}"
}

 Привязка группы безопасности к портам VM
 Привязка к vm_01
resource "vkcs_networking_port_secgroup_associate" "assosiation_vm_01" {
  port_id = "${vkcs_networking_port.port_vm_01.id}"
  security_group_ids = [
    "${vkcs_networking_secgroup.security_group.id}",
  ]
}

 Виртуальные машины

resource "vkcs_compute_instance" "vm_01" {
  name            = "vm_01"
  image_id        = "024f4129-5fc9-43c5-8f64-946859e20e5c"
  flavor_id       = "d659fa16-c7fb-42cf-8a5e-9bcbe80a7538"
  user_data = file("cloud_init.cfg")
  network {
    port = "${vkcs_networking_port.port_vm_01.id}"
  }
}

 Информация о машинах

output "vm_01" {
  value = vkcs_networking_floatingip.ext_ip_vm_01.address
}

 Балансировщик
 Порт для балансировщика
resource "vkcs_networking_port" "port_lb" {
  name               = "port_lb"
  network_id         = "${vkcs_networking_network.new_network_01.id}"
  admin_state_up     = "true"
  security_group_ids = ["${vkcs_networking_secgroup.security_group_web.id}"]
  fixed_ip {
    subnet_id  = "${vkcs_networking_subnet.new_subnet_01.id}"
    ip_address = "10.10.10.200"
  }
}

 Внешний адрес для балансировщика
resource "vkcs_networking_floatingip" "ext_ip_lb" {
  pool = "ext-net"
}

 NAT для балансировщика
resource "vkcs_networking_floatingip_associate" "assosiaion_lb" {
  floating_ip = "${vkcs_networking_floatingip.ext_ip_lb.address}"
  port_id     = "${vkcs_networking_port.port_lb.id}"
  depends_on = [
    vkcs_networking_port.port_lb
  ]
}

 Создаем балансировщик
resource "vkcs_lb_loadbalancer" "loadbalancer" {
  name = "loadbalancer"
  vip_subnet_id = "${vkcs_networking_subnet.new_subnet_01.id}"
  vip_port_id = "${vkcs_networking_port.port_lb.id}"
  vip_network_id = "${vkcs_networking_network.new_network_01.id}"
}


 Создаем слушателя
 HTTP
resource "vkcs_lb_listener" "listener_http" {
  name = "listener_http"
  protocol = "HTTP"
  protocol_port = 80
  loadbalancer_id = "${vkcs_lb_loadbalancer.loadbalancer.id}"
}

 Создаем пул
 Пул для HTTP
resource "vkcs_lb_pool" "lb_pool_http" {
  name = "lb_pool_http"
  protocol = "HTTP"
  lb_method = "ROUND_ROBIN" #ROUND_ROBIN, LEAST_CONNECTIONS, SOURCE_IP, or SOURCE_IP_PORT.
  listener_id = "${vkcs_lb_listener.listener_http.id}"
}

Инстансы балансировщика
 Первый инстанс
 HTTP
resource "vkcs_lb_member" "lb_vm_01_http" {
  address = "10.10.10.100"
  protocol_port = 80 #Порт, на котором слушает приложение на вм
  pool_id = "${vkcs_lb_pool.lb_pool_http.id}"
  subnet_id = "${vkcs_networking_subnet.new_subnet_01.id}"
  weight = 1 #Больше вес -- больше запросов уходит на этот хост
}

 Второй инстанс
 HTTP
resource "vkcs_lb_member" "lb_vm_02_http" {
  address = "10.10.10.150"
  protocol_port = 80
  pool_id = "${vkcs_lb_pool.lb_pool_http.id}"
  subnet_id = "${vkcs_networking_subnet.new_subnet_01.id}"
  weight = 2 #Больше вес -- больше запросов уходит на этот хост
}

 Информация о балансировщике
output "loadbalancer_ip" {
  value = vkcs_networking_floatingip.ext_ip_lb.address
}
